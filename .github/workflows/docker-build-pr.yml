name: PR Docker Build and Comment

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  IMAGE_NAME: discord-quest-watcher
  REGISTRY: ghcr.io

permissions:
  contents: write
  packages: write

jobs:
  build-pr-image:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: extract docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=pr-${{ github.event.pull_request.number }}

      - name: set up buildx
        uses: docker/setup-buildx-action@v3

      - name: build and push image
        id: build-and-push-pr
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
            GIT_BRANCH=${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Comment on PR
        uses: actions/github-script@v6
        env:
          PR_IMAGE_REGISTRY: ${{ env.REGISTRY }}
          PR_IMAGE_OWNER: ${{ github.repository_owner }}
          PR_IMAGE_NAME: ${{ env.IMAGE_NAME }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        with:
          script: |
            const prImage = `${process.env.PR_IMAGE_REGISTRY}/${process.env.PR_IMAGE_OWNER}/${process.env.PR_IMAGE_NAME}:pr-${process.env.PR_NUMBER}`;
            const comment_identifier = "<!-- docker-image-comment -->";
            const comment = `
              ðŸš€ Docker image built successfully! 

              - Image: `${prImage}` 

              ${comment_identifier}
            `;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const old_comments = comments.filter(c => c.body.includes(comment_identifier));
            for (const old_comment of old_comments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: old_comment.id,
              });
            }
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
